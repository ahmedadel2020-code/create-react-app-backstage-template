# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "master" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches: ["${{ values.branch_name }}"]

jobs:
  test:
    if: ${{ values.include_unit_tests }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      - name: Run tests
        run: npm test
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    needs: [test]
    if: ${{ values.deployment_stage == values.enabled_environments }}
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    environment: ${{ env.DEPLOYMENT_STAGE }} # Specify the environment to use
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Debug Environment Variables
        run: |
          echo "Current environment: ${{ github.event.deployment.environment }}"
          echo "Project ID: ${{ env.PROJECT_ID }}"
          echo "GAR Name: ${{ env.GAR_NAME }}"
          echo "GAR Location: ${{ env.GAR_LOCATION }}"
          echo "Service Name: ${{ env.SERVICE_NAME }}"
          echo "Region: ${{ env.REGION }}"
          echo "Deployment Stage: ${{ env.DEPLOYMENT_STAGE }}"

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          GAR_LOCATION: ${{ env.GAR_LOCATION }}
        run: |-
          gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          GAR_LOCATION: ${{ env.GAR_LOCATION }}
          GAR_NAME: ${{ env.GAR_NAME }}
          SERVICE: ${{ env.SERVICE_NAME }}
          DEPLOYMENT_STAGE: ${{ env.DEPLOYMENT_STAGE }}
        run: |-
          docker build \
            --build-arg DEPLOYMENT_STAGE=${{ env.DEPLOYMENT_STAGE }} \
            -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          GAR_LOCATION: ${{ env.GAR_LOCATION }}
          GAR_NAME: ${{ env.GAR_NAME }}
          SERVICE: ${{ env.SERVICE_NAME }}
          REGION: ${{ env.REGION }}
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
